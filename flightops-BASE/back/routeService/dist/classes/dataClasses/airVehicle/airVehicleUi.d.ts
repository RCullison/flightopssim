import { AIR_VEHICLE_STATUS, AIRVEHICLE_UI_DATA, AIR_VEHICLE_MODE, SENSOR_ID_TYPE, AIR_VEHICLE_TYPES, RANGE, GEOPOINT_VECTOR, DRONE_STYLES, DTM_ROUTE_FULL_DATA, CHANGE_ALT_DATA, SENSOR_AGL, GEOJSON_POINT, TASK_TYPE, GENERAL_EXTERNAL_LOCATION_DATA, ID_TYPE } from '../../typings/all.typings';
import { AIRVEHICLE_TYPES, GEOPOINT } from '../../typings/all.typings';
export declare class AirVehicleUi {
    id: string;
    ip: string;
    taskId: string;
    name: string;
    sensorId: SENSOR_ID_TYPE;
    energy: number;
    voltage: number;
    current: number;
    location: GEOJSON_POINT;
    heading: number;
    showVideo: boolean;
    videoStreamIP: string;
    mode: AIR_VEHICLE_MODE;
    homePoint: GEOJSON_POINT;
    operationalAlt: number;
    status: AIR_VEHICLE_STATUS;
    height: number;
    distanceFromHome: number;
    gps_health: number;
    velocity: number;
    corridor: GEOPOINT_VECTOR;
    energyConsumption: number;
    minAltitude: number;
    maxAltitude: number;
    airVehicleRoute: GEOPOINT[];
    estimatedRoute: GEOPOINT[];
    estimatedGimbalVector: GEOPOINT[];
    requestedLocation: GEOJSON_POINT | undefined;
    requestedAzimuth: number | undefined;
    timeToBeReplaced?: number;
    replacementRhBat?: number;
    isForce: boolean;
    takeoffASLHeight: number;
    currentASLHeight: number;
    aglHeight: number;
    landingPointId: ID_TYPE;
    styles: DRONE_STYLES;
    missionLineTo: GEOJSON_POINT;
    sensorType: AIRVEHICLE_TYPES;
    energyForReturnHome: number;
    type: AIR_VEHICLE_TYPES;
    slope: RANGE;
    dtmRoute: DTM_ROUTE_FULL_DATA;
    capsuleId: string;
    externalServices: CHANGE_ALT_DATA;
    sensorAGL: SENSOR_AGL;
    taskType: TASK_TYPE;
    extrapolationLocation: GEOJSON_POINT;
    location_ELS: GEOJSON_POINT;
    externalLocationData: GENERAL_EXTERNAL_LOCATION_DATA;
    lockedForRH: boolean;
    onRhRequest: boolean;
    constructor(_airVehicle: AIRVEHICLE_UI_DATA);
    update(_airVehicle: AIRVEHICLE_UI_DATA): void;
    reset(): void;
}
