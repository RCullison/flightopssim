import { AIR_VEHICLE_FLY_STATUS, AIR_VEHICLE_TYPES, AIRVEHICLE_STYLE, ALGORITHM_STATUS, AUTONOMOUS_ROUTE_PROGRESS_STATUS, CARTESIAN2, CHANGE_ALT_DATA, CHANGE_ROUTE_STATUS, DTM_ROUTE_FULL_DATA, EMERGENCY_NETWORK_IDS, GEOJSON_POINT, GEOJSON_POLYLINE, GEOPOINT_VECTOR, GIMBAL, ID_TYPE, LANDING_LOCATION, LDBS_TELEMETRY_DATA, MAP, MAPI_AIR_VEHICLE, MISSION_STATUS, OBJ_VALUE, PREV_LOCATION, RANGE, RC_MODE, MOVE_SERVICE_STATUS_ONBOARD, SENSOR_AGL, SENSOR_ID_TYPE, TASK_TYPE, AIRVEHICLE_LOG_DATA, GENERAL_EXTERNAL_LOCATION_DATA } from '../../typings/all.typings';
import { AIR_VEHICLE_CREATE_DATA, AIR_VEHICLE_MODE, AIR_VEHICLE_SERVICE_STATES, AIR_VEHICLE_STATUS, AIR_VEHICLE_UPDATE_DATA, AIRVEHICLE_TYPES, AIRVEHICLE_UI_DATA, BASIC_AIR_VEHICLES_STATUSES, FLYT_STATE, IMU, LOITER_PATTERN_STATUS, MISSION_TYPE, OWNER_TYPE, SENSOR_STATUS, WAYPOINTS_PATTERN_STATUS, YXZW } from '../../typings/class.typings';
import { WAYPOINTS_DATA } from '../../typings/ds.typings';
import { NETWORK_FOR_SHOW, ROCK_SEVEN_DRONE_TELEMETRY_DE_MASKED, ROCK_SEVEN_DRONE_TELEMETRY_UI } from '../commands/typesDSC';
export declare class AirVehicle {
    systemId: string;
    id: ID_TYPE;
    isSimulated: boolean;
    ip: string;
    isForce: boolean;
    taskTypes: MAP<boolean>;
    landingTypes: MAP<boolean>;
    type: AIR_VEHICLE_TYPES;
    missionStatus: MISSION_STATUS;
    taskId: ID_TYPE | OBJ_VALUE;
    lookAtTarget: boolean;
    sensorType: AIRVEHICLE_TYPES;
    missionType: MISSION_TYPE;
    callSign: string;
    sensorId: SENSOR_ID_TYPE;
    sensorIds: SENSOR_ID_TYPE[];
    name: string;
    energy: number;
    voltage: number;
    current: number;
    energyConsumption: number;
    location: GEOJSON_POINT;
    takeOffCorridorPoint: GEOJSON_POINT;
    heading: number;
    course: number;
    showVideo: boolean;
    videoStreamIP: string;
    mode: AIR_VEHICLE_MODE;
    homePoint: GEOJSON_POINT;
    homeHeight: number;
    operationalAlt: number;
    loiterRadius: number;
    technicalStatuses: AIR_VEHICLE_SERVICE_STATES;
    nextPoint: string;
    observationPoint: string;
    cameraProperties: {
        azimuth: number;
        elevation: number;
    };
    status: AIR_VEHICLE_STATUS;
    prevStatus: AIR_VEHICLE_STATUS;
    height: number;
    timeLeft: number;
    state: FLYT_STATE;
    currentStatusTimeStart: number;
    droneStatusDS: BASIC_AIR_VEHICLES_STATUSES;
    distanceFromHome: number;
    replaced: boolean;
    gps_health: number;
    attitude: YXZW;
    imu: IMU;
    velocity: number;
    loiterPatternStatus: LOITER_PATTERN_STATUS;
    waypointsPatternStatus: WAYPOINTS_PATTERN_STATUS;
    changeRouteStatus: CHANGE_ROUTE_STATUS;
    connectivity: AIR_VEHICLE_SERVICE_STATES;
    onBoard: boolean;
    flytBase: boolean;
    network: boolean;
    namespace: any;
    isArmed: any;
    onRhRequest: boolean;
    rhRequestToFCS: boolean;
    isForceRH: boolean;
    owner: OWNER_TYPE;
    lastUpdatedForEnergyConsumptionCalc: number;
    lastRecordedEnergyForConsumptionCalc: number;
    droneModel: string;
    gimbal: GIMBAL;
    sensorVector: GEOPOINT_VECTOR;
    droneRoute: GEOJSON_POLYLINE;
    estimatedRoute: GEOJSON_POINT;
    estimatedGimbalVector: GEOJSON_POINT;
    requestedLocation: GEOJSON_POINT | undefined;
    requestedAzimuth: number | undefined;
    requestedLocationUpdate: number;
    requestedAzimuthUpdate: number;
    releasedTaskId: string;
    landingLocation: LANDING_LOCATION;
    emergencyLocation: LANDING_LOCATION;
    landingPointId: ID_TYPE;
    landingPresetsId: string;
    styles: AIRVEHICLE_STYLE;
    missionLineTo: GEOJSON_POINT;
    sensorStatus: SENSOR_STATUS;
    corridor: GEOPOINT_VECTOR;
    minAltitude: number;
    maxAltitude: number;
    availableSlots: number[];
    wayPoints: WAYPOINTS_DATA;
    energyForReturnHome: number;
    flyStatus: AIR_VEHICLE_FLY_STATUS;
    maxLegLength: number;
    isOnGnd: boolean;
    rateOfClimb: number;
    energyPerSecondForClimb: number;
    rateOfLanding: number;
    timeToBeReplaced: number;
    replacementRhBat: number;
    takeoffToCorridorPoint: boolean;
    allocateProcess: boolean;
    reExecuteProcess: boolean;
    safetyNfzId: ID_TYPE;
    rs_mode: RC_MODE;
    onBoardMissionStatus: ALGORITHM_STATUS;
    launcherAbsHeight: number;
    launcherPoint: GEOJSON_POINT;
    landAbsHeight: number;
    prev_02_05_position: PREV_LOCATION;
    externalTaskId: ID_TYPE | OBJ_VALUE;
    minAltFromLand: number;
    slope: RANGE;
    dtmRoute: DTM_ROUTE_FULL_DATA;
    routeLocation_CARTESIAN2: CARTESIAN2;
    takeoffASLHeight: number;
    isChangedHome: boolean;
    takeoffHeight_ATP: number;
    isAGL: boolean;
    pilotId: string;
    emergencyTelemetry: ROCK_SEVEN_DRONE_TELEMETRY_DE_MASKED;
    emergencyTelemetryForShow: ROCK_SEVEN_DRONE_TELEMETRY_UI;
    regularTelemetryForShow: NETWORK_FOR_SHOW;
    emergencyNetworkIds: EMERGENCY_NETWORK_IDS;
    emergencyCommands: MAP<any>;
    last_change_time: number;
    algorithmStatus: AUTONOMOUS_ROUTE_PROGRESS_STATUS;
    isTemporaryManual: boolean;
    isTemporaryLanding: boolean;
    aglHeight: number;
    flightCommandServiceStatus: MOVE_SERVICE_STATUS_ONBOARD;
    capsuleId: string;
    externalServices: CHANGE_ALT_DATA;
    sensorAGL: SENSOR_AGL;
    wayPointComplex_ob_version: number;
    wayPointComplex_ws_version: number;
    flightId: string;
    taskType: TASK_TYPE;
    extrapolationLocation: GEOJSON_POINT;
    location_ELS: GEOJSON_POINT;
    externalLocationData: GENERAL_EXTERNAL_LOCATION_DATA;
    isNoGPSFlight: boolean;
    lockedForRH: boolean;
    isIgnoreLockedForRH: boolean;
    config: {
        ip: string;
        systemId: string;
        isSimulated: string;
        isForce: string;
        taskTypes: string;
        landingTypes: string;
        id: string;
        taskId: string;
        lookAtTarget: string;
        sensorType: string;
        missionType: string;
        callSign: string;
        name: string;
        namespace: string;
        missionStatus: string;
        type: string;
        isExist: string;
        operationalAlt: string;
        maxVelocity: string;
        maxDeltaVelocityUp: string;
        maxDeltaVelocityDown: string;
        maxYawVelocity: string;
        'failSafe.RHBat': string;
        'failSafe.LandBat': string;
        'failSafe.EmergencyLandHeight': string;
        sensorId: string;
        sensorIds: string;
        course: string;
        minPitch: string;
        maxPitch: string;
        droneStatusDS: string;
        energy: string;
        voltage: string;
        current: string;
        energyConsumption: string;
        velocity: string;
        location: string;
        takeOffCorridorPoint: string;
        gps_health: string;
        height: string;
        attitude: string;
        imu: string;
        connectivity: string;
        onBoard: string;
        flytBase: string;
        network: string;
        heading: string;
        distanceFromHome: string;
        homePoint: string;
        homeHeight: string;
        status: string;
        missionLineTo: string;
        isArmed: string;
        loiterPatternStatus: string;
        waypointsPatternStatus: string;
        changeRouteStatus: string;
        owner: string;
        corridor: string;
        minAltitude: string;
        maxAltitude: string;
        availableSlots: string;
        wayPoints: string;
        energyForReturnHome: string;
        flyStatus: string;
        droneModel: string;
        gimbal: string;
        sensorVector: string;
        droneRoute: string;
        estimatedRoute: string;
        estimatedGimbalVector: string;
        requestedLocation: string;
        requestedAzimuth: string;
        requestedLocationUpdate: string;
        requestedAzimuthUpdate: string;
        maxLegLength: string;
        releasedTaskId: string;
        isOnGnd: string;
        rateOfClimb: string;
        energyPerSecondForClimb: string;
        rateOfLanding: string;
        timeToBeReplaced: string;
        replacementRhBat: string;
        takeoffToCorridorPoint: string;
        rs_mode: string;
        onBoardMissionStatus: string;
        prev_02_05_position: string;
        launcherAbsHeight: string;
        launcherPoint: string;
        landAbsHeight: string;
        externalTaskId: string;
        minAltFromLand: string;
        landingLocation: string;
        emergencyLocation: string;
        landingPointId: string;
        slope: string;
        dtmRoute: string;
        takeoffASLHeight: string;
        isChangedHome: string;
        takeoffHeight_ATP: string;
        isAGL: string;
        emergencyTelemetry: string;
        emergencyTelemetryForShow: string;
        regularTelemetryForShow: string;
        emergencyNetworkIds: string;
        emergencyCommands: string;
        last_change_time: string;
        podId: string;
        algorithmStatus: string;
        isTemporaryManual: string;
        isTemporaryLanding: string;
        flightCommandServiceStatus: string;
        capsuleId: string;
        externalServices: string;
        sensorAGL: string;
        wayPointComplex_ob_version: string;
        wayPointComplex_ws_version: string;
        flightId: string;
        taskType: string;
        extrapolationLocation: string;
        location_ELS: string;
        externalLocationData: string;
        lockedForRH: string;
        replaced: string;
        onRhRequest: string;
        allocateProcess: string;
        routeLocation_CARTESIAN2: string;
        isForceRH: string;
        isIgnoreLockedForRH: string;
        sensorStatus: string;
        wtsaypointsPatternStatus: string;
        landingPresetsId: string;
        isNoGPSFlight: string;
    };
    constructor(drone: any);
    update: (obj: AIR_VEHICLE_UPDATE_DATA | AIR_VEHICLE_CREATE_DATA) => void;
    updateModeDefine: (drone: any, mdData: any) => void;
    private dtmRouteUi;
    toJsonForUI: () => AIRVEHICLE_UI_DATA;
    toJsonForLOG: (taskType: any) => AIRVEHICLE_LOG_DATA;
    toJsonForMAPI: () => MAPI_AIR_VEHICLE;
    toJsonForLog: (taskType: any) => Partial<LDBS_TELEMETRY_DATA>;
}
