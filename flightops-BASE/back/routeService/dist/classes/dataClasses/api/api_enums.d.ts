export declare enum GENERAL_API {
    general = "api"
}
export declare enum GENERAL_MAPI_API {
    general = "mapi",
    external = "api",
    internal = "internalAPI"
}
export declare enum GENERAL_VCS_API {
    general = "api"
}
export declare enum SiteAgent_API {
    restart = "/restart"
}
export declare enum AMS_API {
    getSite = "/getSite",
    setPerimeter = "/setPerimeter",
    getPerimeter = "/getPerimeter",
    deletePerimeter = "/deletePerimeter",
    setStaticNFZ = "/setStaticNFZ",
    getStaticNFZ = "/getStaticNFZ",
    getAllStaticNFZ = "/getAllStaticNFZ",
    deleteStaticNFZ = "/deleteStaticNFZ",
    deleteAllStaticNFZ = "/deleteAllStaticNFZ",
    setDynamicNFZ = "/setDynamicNFZ",
    getDynamicNFZ = "/getDynamicNFZ",
    getAllDynamicNfz = "/getAllDynamicNfz",
    deleteDynamicNFZ = "/deleteDynamicNFZ",
    deleteAirVehicleDynamicNFZs = "/deleteAirVehicleDynamicNFZs",
    replaceAirVehicleDynamicNFZs = "/replaceAirVehicleDynamicNFZs",
    setAllExternalNFZ = "/setAllExternalNFZ",
    setExternalNFZ = "/setExternalNFZ",
    getExternalNFZ = "/getExternalNFZ",
    getAllExternalNfz = "/getAllExternalNfz",
    getExternalNfzByOwner = "/getExternalNfzByOwner",
    deleteExternalNFZ = "/deleteExternalNFZ",
    deleteAllExternalNFZ = "/deleteAllExternalNFZ",
    deleteAllDynamicNfz = "/deleteAllDynamicNfz",
    updatePerimeter = "/updatePerimeter",
    updateNFZ = "/updateNFZ",
    getAllNFZs = "/getAllNFZs",
    getAllInternalNFZs = "/getAllInternalNFZs",
    testCartesianCalc = "/testCartesianCalc",
    testGeoCalc = "/testGeoCalc",
    testCompressMatrix = "/testCompressMatrix",
    testDeCompressMatrix = "/testDeCompressMatrix",
    nfzCalc = "/nfzCalc",
    getMatrixVersion = "/getMatrixVersion",
    getNfzInfluence = "/getNfzInfluence",
    getNfzInfluenceById = "/getNfzInfluenceById"
}
export declare enum SSG_API {
    landing = "/landing",
    returnHome = "/returnHome",
    flyTo = "/flyTo",
    croppedTelemetry = "/croppedTelemetry"
}
export declare enum ER7_API {
    getAllMessages = ""
}
export declare enum SGG_API {
    landing = "/landing",
    simpleLanding = "/simpleLanding",
    returnHome = "/returnHome",
    flyTo = "/flyTo",
    croppedTelemetry = "/croppedTelemetry"
}
export declare enum ESSG_API {
    landing = "/landing",
    returnHome = "/returnHome",
    flyTo = "/flyTo",
    croppedTelemetry = "/croppedTelemetry",
    cropTelemetrySimulator = "/cropTelemetrySimulator",
    returnHomeSimulator = "/returnHomeSimulator",
    flyToSimulator = "/flyToSimulator",
    landingSimulator = "/landingSimulator"
}
export declare enum DCS_API {
    compress = "/compress",
    decompress = "/decompress"
}
export declare enum CMS_API {
    getSysInfo = "/getSysInfo",
    getServicesStatus = "/getServicesStatus"
}
export declare enum DBS_API {
    setSite = "/setSite",
    getSite = "/getSite",
    setPerimeter = "/setPerimeter",
    getPerimeter = "/getPerimeter",
    deletePerimeter = "/deletePerimeter",
    setStaticNFZ = "/setStaticNFZ",
    getStaticNFZ = "/getStaticNFZ",
    getAllStaticNFZ = "/getAllStaticNFZ",
    deleteStaticNFZ = "/deleteStaticNFZ",
    deleteAllStaticNFZ = "/deleteAllStaticNFZ",
    setDynamicNFZ = "/setDynamicNFZ",
    getDynamicNFZ = "/getDynamicNFZ",
    getAllDynamicNfz = "/getAllDynamicNfz",
    deleteDynamicNFZ = "/deleteDynamicNFZ",
    deleteAllDynamicNfz = "/deleteAllDynamicNfz",
    getAllRoutes = "/getAllRoutes",
    setRoute = "/setRoute",
    deleteRoute = "/deleteRoute",
    getAllTasks = "/getAllTasks",
    setAutonomousRoute = "/setAutonomousRoute",
    getAllAutonomousRoutes = "/getAllAutonomousRoutes",
    deleteAutonomousRoute = "/deleteAutonomousRoute",
    setTask = "/setTask",
    deleteTask = "/deleteTask",
    getLogsByFilter = "/getLogsByFilter",
    getLogs = "/getLogs",
    addLog = "/addLog",
    getSystemId = "/getSystemId",
    saveSystemId = "/saveSystemId"
}
export declare enum LS_API {
    takeoff = "/takeoff",
    landing = "/landing",
    fly_to = "/fly_to",
    startTask = "/startTask",
    returnHome = "/returnHome",
    addSystemLog = "/addSystemLog",
    addUserNote = "/addUserNote",
    getLogsByFilter = "/getLogsByFilter",
    getLogsLastFlight = "/getLogsLastFlight",
    getAirVehiclesData = "/getAirVehiclesData",
    getFlightAreasData = "/getFlightAreasData",
    changeIsSaveLogs = "/changeIsSaveLogs"
}
export declare enum RS_API {
    updateArea = "/updateArea",
    updateSite = "/updateSite",
    updatePartOfAreaMatrix = "/updatePartOfAreaMatrix",
    computeRoute = "/computeRoute",
    computeRouteFollowTerrain = "/computeRouteFollowTerrain",
    computeRouteFollowTerrain_floating = "/computeRouteFollowTerrain_floating",
    computeRouteTerrainFollowingFullPath = "/computeRouteTerrainFollowingFullPath",
    computeWithDirection = "/computeWithDirection",
    computeWithDirection_floating = "/computeWithDirection_floating",
    findRoute_finish_floating = "/findRoute_finish_floating",
    findRoute_finish_floating_withDirection = "/findRoute_finish_floating_withDirection",
    findRoute_finish_floating_followTerrain = "/findRoute_finish_floating_followTerrain",
    findRoute_genery = "/findRoute_genery",
    findRoute_start_floating = "/findRoute_start_floating",
    findRoute_start_floating_forCircularRequestFCS = "/findRoute_start_floating_forCircularRequestFCS",
    findRoute_start_floating_withDirection = "/findRoute_start_floating_withDirection",
    findRoute_start_finish_floating = "/findRoute_start_finish_floating",
    findRoute_start_finish_floating_withDirection = "/findRoute_start_finish_floating_withDirection",
    findRoute_with_static_part = "/findRoute_with_static_part",
    findRoute_with_static_part_start_floating = "/findRoute_with_static_part_start_floating",
    findRoute_with_static_part_withGraph = "/findRoute_with_static_part_withGraph",
    findRoute_with_static_part_withGraph_start_floating = "/findRoute_with_static_part_withGraph_start_floating",
    findRoute_static_part_graph_start_floating_on_dynamic = "/findRoute_static_part_graph_start_floating_on_dynamic",
    buildGraphFromRoute = "/buildGraphFromRoute",
    cartographicToMatrix = "/cartographicToMatrix",
    isPointOutsideNFZ = "/isPointOutsideNFZ",
    addBypassRelief = "/addBypassRelief",
    pointsStraightFilter = "/pointsStraightFilter",
    updateMatrixAndCartographic = "/updateMatrixAndCartographic",
    addCrossAllNfzPoints = "/addCrossAllNfzPoints",
    getMatrixVersion = "/getMatrixVersion"
}
export declare enum GCS_API {
    setExternalControl = "setExternalControl",
    setGimbal = "/setGimbal",
    gimbalMove = "/gimbalMove"
}
export declare enum FCS_API {
    updateArea = "/updateArea",
    securityMissionUpload = "/securityMissionUpload",
    TEST_sendToLogServer = "/TEST_sendToLogServer",
    updateArea3D = "/updateArea3D",
    takeOff = "takeOff",
    land = "land",
    goHome = "goHome",
    flyTo = "flyTo",
    setLocalPosition = "setLocalPosition",
    arm = "arm",
    disarm = "disarm",
    setHome = "setHome",
    hover = "hover",
    setVelocity = "setVelocity",
    hotPoint_upload = "hotPoint/upload",
    hotPoint_info = "hotPoint/info",
    hotPoint_action = "hotPoint/action",
    wayPoint_uploadComplex = "wayPoint/uploadComplex",
    uploadComplex = "uploadComplex",
    wayPoint_info = "wayPoint/info",
    info = "info",
    wayPoint_uploadAutonomousTask = "wayPoint/uploadAutonomousTask",
    uploadAutonomousTask = "uploadAutonomousTask",
    wayPoint_autonomousAction = "wayPoint/autonomousAction",
    autonomousAction = "autonomousAction",
    WaypointsComplex_to_POINT_Arr = "/WaypointsComplex_to_POINT_Arr",
    setHomeLocation = "/setHomeLocation",
    updateAirVehicle = "/updateAirVehicle",
    resetFlightId = "/resetFlightId",
    setTelemetryCropped = "/setTelemetryCropped",
    wayPoint_uploadNoGpsTask = "wayPoint/uploadNoGpsTask",
    uploadNoGpsTask = "uploadNoGpsTask",
    wayPoint_action = "wayPoint/action",
    action = "action",
    airVehicleService_restUpdateDrone = "airVehicleService/restUpdateDrone",
    winchDeliver = "/winchDeliver",
    winchReelUp = "/winchReelUp",
    winchReelDown = "/winchReelDown",
    winchFreewheel = "/winchFreewheel",
    winchLock = "/winchLock",
    winchStop = "/winchStop",
    winchUserStatus = "/winchUserStatus",
    setGimbal = "/setGimbal",
    gimbalMove = "/gimbalMove",
    test_computeShortestRoute = "/test_computeShortestRoute",
    test_simpleLandingSatellite = "/test_simpleLandingSatellite",
    test_RH_Satellite = "/test_RH_Satellite",
    test_FlyToSatellite = "/test_FlyToSatellite",
    getListImei = "/getListImei",
    setTelemetriesFromSatellite = "/telemetrySatellite",
    test_setTelemetriesFromSatellite = "/test_setTelemetriesFromSatellite",
    reloadFCS = "/reloadFCS",
    startFollowTarget = "/startFollowTarget",
    finishFollowTarget = "/finishFollowTarget",
    setTestOwner = "/setTestOwner",
    openLights = "/openLights",
    setLightsIntensity = "/setLightsIntensity",
    closeLights = "/closeLights",
    createDynamicNFZFromRoute = "/createDynamicNFZFromRoute",
    moveAirVehicle = "/moveAirVehicle",
    rotateAirVehicle = "/rotateAirVehicle",
    commandToOnBoardGeneric = "/commandToOnBoardGeneric",
    testSetDrone = "/testSetDrone",
    gimbal_set = "/gimbal/set",
    updateAirVehicles = "/updateAirVehicles",
    deleteVisualPointFromDrone = "/deleteVisualPointFromDrone",
    setManualControl = "/setManualControl",
    changeAlt = "/changeAlt"
}
export declare enum SMS_API {
    getSystemId = "/getSystemId ",
    saveSystemId = "/saveSystemId",
    updateAllConfigs = "/updateAllConfigs"
}
export declare enum SMM_API {
    registerSystem = "/registerSystem",
    updateSystem = "/updateSystem",
    unRegisterSystem = "/unRegisterSystem",
    pushLog = "/pushLog",
    pushLogsArr = "/pushLogsArr",
    updateSystemInfo = "/updateSystemInfo",
    setConfigC2 = "/setConfigC2",
    pushSystemStatusPM2 = "/pushSystemStatusPM2",
    setAllConfigs = "/setAllConfigs"
}
export declare enum SMM_WS_API {
    systemStatus = "systemStatus"
}
export declare enum WS_API {
    getFreeAltitudes = "/getFreeAltitudes",
    updateOperationalAlt = "/updateOperationalAlt",
    updateSlope = "/updateSlope",
    createDynamicNFZ = "/createDynamicNFZ",
    deleteAirVehicleDynamicNFZs = "/deleteAirVehicleDynamicNFZs",
    getLogsByFilter = "/getLogsByFilter",
    getLogsLastFlight = "/getLogsLastFlight",
    getAirVehiclesData = "/getAirVehiclesData",
    getFlightAreasData = "/getFlightAreasData",
    addUserNote = "/addUserNote",
    changeIsSaveLogs = "/changeIsSaveLogs",
    getMessagesByAVId = "/getMessagesByAVId",
    userMessage = "/userMessage",
    getAllMessages = "/getAllMessages",
    getAltitudeFromDTM = "/getAltitudeFromDTM",
    getAllTasks = "/getAllTasks",
    getAllFreeTasks = "/getAllFreeTasks",
    getAllAirVehicles = "/getAllAirVehicles",
    getAllFreeAirVehicles = "/getAllFreeAirVehicles",
    getTasksByTypes = "/getTasksByTypes",
    getTaskById = "/getTaskById",
    allocateAirVehicleToTask = "/allocateAirVehicleToTask",
    allocateAirVehiclesToTasks = "/allocateAirVehiclesToTasks",
    unallocateAirVehicleFromTask = "/unallocateAirVehicleFromTask",
    getAllNFZ = "/getAllNFZ",
    showRoute = "/showRoute",
    reexecuteTask = "/reexecuteTask",
    resetUTMLock = "/resetUTMLock",
    isUTMLocked = "/isUTMLocked",
    updateAlerts = "/updateAlerts",
    updateArea3D = "/updateArea3D",
    getDTMGraph = "/getDTMGraph",
    getAllSpareLandingPoints_Arr = "/getAllSpareLandingPoints_Arr",
    flightToPointAndLand = "/flightToPointAndLand",
    getAllLandingPoints_Arr = "/getAllLandingPoints_Arr",
    create_visualLandingPoints = "/create_visualLandingPoints",
    sendVisualLandingPointToDrone = "/sendVisualLandingPointToDrone",
    delete_visualLandingPoints = "/delete_visualLandingPoints",
    create_spareLandingPoints = "/create_spareLandingPoints",
    getAGL_defaultParameters = "/getAGL_defaultParameters",
    editShippingTask = "/editShippingTask",
    editShipWithoutLandingTask = "/editShipWithoutLandingTask",
    editDeliveryPointTask = "/editDeliveryPointTask",
    testCheckRoute_3D = "/testCheckRoute_3D",
    setGimbal = "/setGimbal",
    gimbalMove = "/gimbalMove",
    setGimbalFree = "/setGimbalFree",
    onFCSReload = "/onFCSReload",
    createDynamicPoint = "/createDynamicPoint",
    updateDynamicPoint = "/updateDynamicPoint",
    getViewPointDistance = "/getViewPointDistance",
    getGitInfo = "/getGitInfo",
    forceRH = "/forceRH",
    getExternalAirVehicles = "/getExternalAirVehicles",
    getUIConfigSettings = "/getUIConfigSettings",
    testSetAlerts = "/testSetAlerts",
    speakGeneric = "/speakGeneric",
    getNfzInfluence = "/getNfzInfluence",
    log = "/log",
    createTaskTrackPoint = "/createTaskTrackPoint",
    moveAirVehicle = "/moveAirVehicle",
    rotateAirVehicle = "/rotateAirVehicle",
    updateTrackPointTask = "/updateTrackPointTask",
    test = "/test",
    sendAllNFZs = "/sendAllNFZs",
    sendDynamicNFZs = "/sendDynamicNFZs",
    sendStaticNFZs = "/sendStaticNFZs",
    setSendToUIMinInterval = "/setSendToUIMinInterval",
    doLogFlightEvent = "/doLogFlightEvent",
    getConfigurations = "/getConfigurations"
}
export declare enum IPS_API {
    WS_IWS_SensorData = "WS_IWS_SensorData"
}
export declare enum ExtUTMG_API {
    register = "/register",
    syncUssData = "/syncUssData",
    getFlightRouteApproval = "/getFlightRouteApproval",
    getFlightPlanApproval = "/getFlightPlanApproval",
    getFinalFlightPlanApproval = "/getFinalFlightPlanApproval",
    setNFZs = "setNFZs",
    setAirVehiclesTelemetry = "setAirVehiclesTelemetry",
    updateAllNFZ = "/updateAllNFZ",
    updateAllAirVehicles = "/updateAllAirVehicles",
    testGetFlightRouteApproval = "/testGetFlightRouteApproval",
    testSetExternalAirVehicles = "/testSetExternalAirVehicles",
    testSetAirVehiclesAlerts = "/testSetAirVehiclesAlerts",
    testApprovalResponseProcessing = "/testApprovalResponseProcessing",
    testApprovalResponseProcessing_catch = "/testApprovalResponseProcessing_catch",
    getTime = "/getTime",
    getPolicy = "/getPolicy",
    computeFlightPlan = "/computeFlightPlan",
    convertFlightRouteToFlightPlan = "/convertFlightRouteToFlightPlan",
    getGeoPointASL = "/getGeoPointASL",
    submitPlan = "/submitPlan",
    takeOff = "/takeOff",
    updateFlightPlan = "/updateFlightPlan",
    checkFlightPlanValidity = "/checkFlightPlanValidity",
    land = "/land",
    landAll = "/landAll",
    cancelFlightPlan = "/cancelFlightPlan",
    getAllNfzPicture = "/getAllNfzPicture",
    getNFZs = "/getNFZs",
    updateCartographic = "/updateCartographic"
}
export declare enum UTMG_API {
    register = "/register",
    syncUssData = "/syncUssData",
    cancelFlightPlan = "/cancelFlightPlan",
    testGetFlightRouteApproval = "/testGetFlightRouteApproval",
    getFlightRouteApproval = "/getFlightRouteApproval",
    getFlightPlanApproval = "/getFlightPlanApproval",
    getFinalFlightPlanApproval = "/getFinalFlightPlanApproval",
    setNFZs = "setNFZs",
    setAirVehiclesTelemetry = "setAirVehiclesTelemetry",
    updateAllNFZ = "/updateAllNFZ",
    updateAllAirVehicles = "/updateAllAirVehicles",
    deleteNFZ = "/deleteNFZ",
    addNfz = "/addNfz",
    setNFZsPicture = "/setNFZsPicture"
}
export declare enum UTM_API {
    register = "/register",
    syncUssData = "/syncUssData",
    cancelFlightPlan = "/cancelFlightPlan",
    getFlightPlanApproval = "/getFlightPlanApproval",
    getFinalFlightPlanApproval = "/getFinalFlightPlanApproval",
    general = "utm"
}
export declare enum SUTMG_API {
    auth = "/auth",
    logIn = "/logIn",
    verify = "/verify",
    general = "api"
}
export declare enum JWTA_API {
    logIn = "/logIn",
    auth = "/auth",
    verify = "/verify"
}
export declare enum APIG_API {
    register = "register",
    cancelFlightPlan = "cancelFlightPlan",
    getFlightPlanApproval = "getFlightPlanApproval",
    getFinalFlightPlanApproval = "getFinalFlightPlanApproval",
    getAerialPicture = "getAerialPicture",
    updateCartographic = "updateCartographic",
    updateAllNFZ = "updateAllNFZ",
    updateAllAirVehicles = "updateAllAirVehicles"
}
export declare enum MAPI_API {
    enableAirVehicle = "/enableAirVehicle",
    disableAirVehicle = "/disableAirVehicle",
    setAirVehicleAltitude = "/setAirVehicleAltitude",
    returnHomeAirVehicle = "/returnHomeAirVehicle",
    pauseAirVehicle = "/pauseAirVehicle",
    resumeAirVehicle = "/resumeAirVehicle",
    computeRoute = "/computeRoute",
    computeDtmGraph = "/computeDtmGraph",
    addUpdateExternalAirVehicle = "/addUpdateExternalAirVehicle",
    addRouteMission = "/addRouteMission",
    addPointMission = "/addPointMission",
    addWaspMission = "/addWaspMission",
    addSecurityMission = "/addSecurityMission",
    addShipMission = "/addShipMission",
    addShipWithoutLandMission = "/addShipWithoutLandMission",
    addDeliveryPointMission = "/addDeliveryPointMission",
    addDynamicPointMission = "/addDynamicPointMission",
    updateDynamicPointLocation = "/updateDynamicPointLocation",
    allocateAirVehicleToMission = "/allocateAirVehicleToMission",
    unallocateAirVehicleToMission = "/unallocateAirVehicleToMission",
    deleteMission = "/deleteMission",
    startMission = "/startMission",
    stopMission = "/stopMission",
    getCalculatedRoute = "/getCalculatedRoute",
    reExecuteMission = "/reExecuteMission",
    allocatePilotToMission = "/allocatePilotToMission",
    unallocatePilotToMission = "/unallocatePilotToMission",
    addTargetTrackingMission = "/addTargetTrackingMission",
    updateDroneLocationOnTargetTrackingMission = "/updateDroneLocationOnTargetTrackingMission",
    defineHeadingOnTargetTrackingMission = "/defineHeadingOnTargetTrackingMission",
    updateTargetTrackingLocation = "/updateTargetTrackingLocation",
    addPerimeter = "/addPerimeter",
    addNFZ = "/addNFZ",
    deleteNFZ = "/deleteNFZ",
    getAllSiteNFZs = "/getAllSiteNFZs",
    getConfiguration = "/getConfiguration",
    winchDeliver = "/winchDeliver",
    winchReelUp = "/winchReelUp",
    winchReelDown = "/winchReelDown",
    winchFreewheel = "/winchFreewheel",
    winchLock = "/winchLock",
    winchStop = "/winchStop",
    winchUserStatus = "/winchUserStatus",
    sendUserMessage = "/sendUserMessage",
    getAltitudeFromDTM = "/getAltitudeFromDTM",
    getAllTasks = "/getAllTasks",
    getAllFreeTasks = "/getAllFreeTasks",
    getAllFreeAirVehicles = "/getAllFreeAirVehicles",
    allocateAirVehicleToTask = "/allocateAirVehicleToTask",
    updateAlerts = "/updateAlerts",
    updateSite = "/updateSite",
    updateMissions = "/updateMissions",
    setAllExternalNFZ = "/setAllExternalNFZ",
    setExternalNFZ = "/setExternalNFZ",
    getExternalNFZ = "/getExternalNFZ",
    getAllExternalNfz = "/getAllExternalNfz",
    getExternalNfzByOwner = "/getExternalNfzByOwner",
    deleteExternalNFZ = "/deleteExternalNFZ",
    deleteAllExternalNFZ = "/deleteAllExternalNFZ",
    getAllNFZs = "/getAllNFZs",
    getAllInternalNfz = "/getAllInternalNfz",
    updateCartographic = "/updateCartographic",
    setGimbal = "/setGimbal",
    gimbalMove = "/gimbalMove",
    setGimbalFree = "/setGimbalFree",
    setLookAtTarget = "/setLookAtTarget",
    openLights = "/openLights",
    setLightsIntensity = "/setLightsIntensity",
    closeLights = "/closeLights",
    login = "/login",
    authMAPI = "/authMAPI",
    mapi_socket = "mapi_socket"
}
export declare enum WS_MAPI {
    enableAirVehicle = "/enableAirVehicle",
    addUpdateExternalAirVehicle = "/addUpdateExternalAirVehicle",
    disableAirVehicle = "/disableAirVehicle",
    setAirVehicleAltitude = "/setAirVehicleAltitude",
    openLights = "/openLights",
    setLightsIntensity = "/setLightsIntensity",
    closeLights = "/closeLights",
    returnHomeAirVehicle = "/returnHomeAirVehicle",
    pauseAirVehicle = "/pauseAirVehicle",
    resumeAirVehicle = "/resumeAirVehicle",
    computeRoute = "/computeRoute",
    computeDtmGraph = "/computeDtmGraph",
    addRouteMission = "/addRouteMission",
    addPointMission = "/addPointMission",
    addWaspMission = "/addWaspMission",
    addSecurityMission = "/addSecurityMission",
    addShipMission = "/addShipMission",
    addShipWithoutLandMission = "/addShipWithoutLandMission",
    addDeliveryPointMission = "/addDeliveryPointMission",
    addDynamicPointMission = "/addDynamicPointMission",
    updateDynamicPointLocation = "/updateDynamicPointLocation",
    allocateAirVehicleToMission = "/allocateAirVehicleToMission",
    unallocateAirVehicleFromMission = "/unallocateAirVehicleFromMission",
    deleteMission = "/deleteMission",
    startMission = "/startMission",
    stopMission = "/stopMission",
    getCalculatedRoute = "/getCalculatedRoute",
    reExecuteMission = "/reExecuteMission",
    allocatePilotToMission = "/allocatePilotToMission",
    unallocatePilotToMission = "/unallocatePilotToMission",
    createTaskTrackPoint = "/createTaskTrackPoint",
    moveAirVehicle = "/moveAirVehicle",
    rotateAirVehicle = "/rotateAirVehicle",
    updateTrackPointTask = "/updateTrackPointTask",
    getAllMissions = "/getAllMissions",
    addPerimeter = "/addPerimeter",
    addNFZ = "/addNFZ",
    deleteNFZ = "/deleteNFZ",
    getAllSiteNFZs = "/getAllSiteNFZs",
    getConfiguration = "/getConfiguration",
    winchDeliver = "/winchDeliver",
    winchReelUp = "/winchReelUp",
    winchReelDown = "/winchReelDown",
    winchFreewheel = "/winchFreewheel",
    winchLock = "/winchLock",
    winchStop = "/winchStop",
    winchUserStatus = "/winchUserStatus",
    sendUserMessage = "/sendUserMessage",
    setGimbal = "/setGimbal",
    gimbalMove = "/gimbalMove",
    setGimbalFree = "/setGimbalFree",
    setLookAtTarget = "/setLookAtTarget"
}
export declare enum MAPI_WEB_SOCKET_API {
    SiteTelemetry = "SiteTelemetry",
    AirVehicleTelemetry = "AirVehicleTelemetry",
    MissionsTelemetry = "MissionsTelemetry",
    WinchesTelemetry = "WinchesTelemetry",
    TechnicalStatusTelemetry = "TechnicalStatusTelemetry",
    GimbalsTelemetry = "GimbalsTelemetry",
    room = "room",
    addUpdateExternalAirVehicles = "addUpdateExternalAirVehicles",
    addUpdateExternalAirVehiclesMAP = "addUpdateExternalAirVehiclesMAP",
    ExternalVehiclesTelemetry = "ExternalVehiclesTelemetry",
    DetectorsTelemetry = "DetectorsTelemetry",
    AlertsTelemetry = "AlertsTelemetry",
    CanopiesTelemetry = "CanopiesTelemetry",
    UserMessages = "UserMessages"
}
export declare enum OB_API {
    general = "api",
    takeoff = "takeoff",
    land = "land",
    wayPoint = "wayPoint",
    hotPoint = "hotPoint",
    accurateLanding = "accurateLanding",
    openLights = "openLights",
    setLightsIntensity = "setLightsIntensity",
    closeLights = "closeLights",
    setHome = "setHomePosition",
    winchDeliver = "deliver",
    winchReelUp = "reelUp",
    winchReelDown = "reelDown",
    winchFreewheel = "freewheel",
    winchLock = "lock",
    winchStop = "stop",
    refreshSite = "/refreshSite",
    startFollowTarget = "/startFollowTarget",
    finishFollowTarget = "/finishFollowTarget",
    moveAirVehicle = "/moveAirVehicle",
    moveToLocation = "/moveToLocation",
    rotateAirVehicle = "/rotateAirVehicle",
    stopMoveToLocation = "/stopMoveToLocation",
    stopRotateAirVehicle = "/stopRotateAirVehicle",
    stopAllMoveXY = "/stopAllMoveXY",
    queryToSetOwner = "/queryToSetOwner",
    queryToOffOwner = "/queryToOffOwner",
    changeAlt = "/CAS/startCAS"
}
export declare enum RNS_API {
    addNfz = "/addNfz",
    deleteNFZ = "/deleteNFZ",
    setNFZsPicture = "/setNFZsPicture"
}
export declare enum WS_WEB_SOCKET_API {
    ws_drones = "ws_drones",
    proxy_ui_spareLandingPoints = "proxy_ui_spareLandingPoints",
    proxy_ui_all_gwMessages = "proxy_ui_all_gwMessages",
    proxy_ui_droneData = "proxy_ui_droneData",
    WS_IWS_droneData = "WS_IWS_droneData",
    proxy_ui_applicationState = "proxy_ui_applicationState",
    proxy_ui_sparePointsOnMap = "proxy_ui_sparePointsOnMap",
    webServer_tasksData = "webServer_tasksData",
    webServer_spareLandingData = "webServer_spareLandingData",
    MAPI_airVehicles = "MAPI_airVehicles",
    MAPI_winches = "MAPI_winches",
    MAPI_technicalStatuses = "MAPI_technicalStatuses",
    MAPI_gimbals = "MAPI_gimbals",
    MAPI_outUserMessages = "MAPI_outUserMessages",
    proxy_ui_externalDroneData = "proxy_ui_externalDroneData",
    proxy_ui_detectorsData = "proxy_ui_detectorsData",
    proxy_ui_alertsData = "proxy_ui_alertsData",
    proxy_ui_nfzDynamic = "proxy_ui_nfzDynamic",
    proxy_ui_nfzStatic = "proxy_ui_nfzStatic",
    proxy_ui_nfz = "proxy_ui_nfz",
    proxy_ui_alert = "proxy_ui_alert",
    webServer_SensorData = "webServer_SensorData",
    proxy_ui_fcsLoad = "proxy_ui_fcsLoad",
    gimbal_data_ui = "gimbal_data_ui",
    proxy_ui_wsMessageNew = "proxy_ui_wsMessageNew",
    proxy_ui_observationPoints = "proxy_ui_observationPoints",
    proxy_ui_restartUI = "proxy_ui_restartUI",
    proxy_ui_toaster = "proxy_ui_toaster",
    proxy_ui_routesData = "proxy_ui_routesData",
    proxy_ui_routesSecurityData = "proxy_ui_routesSecurityData",
    proxy_ui_Sensors = "proxy_ui_Sensors",
    MAPI_detectors = "MAPI_detectors",
    MAPI_alerts = "MAPI_alerts",
    MAPI_canopies = "MAPI_canopies",
    proxy_ui_canopiesData = "proxy_ui_canopiesData",
    proxy_ui_sitePerimeter = "proxy_ui_sitePerimeter",
    webServer_visualLandingData = "webServer_visualLandingData"
}
export declare enum LOG_API {
    general = "api",
    getForUI = "/getForUI"
}
export declare enum VOLATUS_CANOPY_API {
    prepareCanopyForTakeOff = "/prepareCanopyForTakeOff",
    prepareCanopyForLanding = "/prepareCanopyForLanding",
    prepareCanopyForAfterLanding = "/prepareCanopyForAfterLanding"
}
export declare enum LDBS_API {
    pushLog = "/pushLog",
    pushLogsArr = "/pushLogsArr",
    deleteByInterval = "/deleteByInterval",
    getByFilter = "/getByFilter",
    getByInterval = "/getByInterval",
    getFilteredDataFromDbs = "/getFilteredDataFromDbs",
    pushFlightLog = "/pushFlightLog",
    getLogs = "/getLogs",
    clearLogs = "/clearLogs"
}
export declare enum LDBS_WS_API {
    pushLog = "pushLog",
    systemStatus = "systemStatus",
    sitesData = "sitesData",
    logIdDataFromSMS = "logIdDataFromSMS"
}
export declare enum SAS_API {
    getTelemetry = "/getTelemetry"
}
export declare enum DTMS_API {
    alts = "alts"
}
export declare enum AUG_API {
    login = "/login",
    authorize = "/authorize",
    checkValidToken = "/checkValidToken"
}
export declare enum FLIGHTOPS_CLIENTS {
    mapi = "mapi",
    c2 = "c2",
    pilot = "pilot",
    joystick = "joystick"
}
export declare enum FLIGHTOPS_REALMS {
    DEV1 = "DEV1"
}
export declare enum EXTERNAL_LOCATION_SOCKET_API {
    externalLocationData = "externalLocationData"
}
