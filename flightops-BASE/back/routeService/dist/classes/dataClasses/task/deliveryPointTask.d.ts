import { ALGORITHM_STATUS, DELIVERY_POINT_TASK_DATA, DELIVERY_TYPE, GEOJSON_POINT, MAPI_MISSION_DATA, POINT3D, RANGE, TASK_TYPE } from '../../typings/all.typings';
import { ITask } from './iTask';
export declare class DeliveryPointTask implements ITask {
    taskId?: string;
    name: string;
    status: ALGORITHM_STATUS;
    type: TASK_TYPE;
    point: GEOJSON_POINT;
    isAGL: boolean;
    altitudeRange: RANGE;
    ASL_Max: number;
    slope: RANGE;
    containerHeight: number;
    heightAboveContainerForDrop: number;
    deliveryType: DELIVERY_TYPE;
    deliveryAzimuth: number;
    IRLockStartHeight: number;
    isNoGPS: boolean;
    styles: {};
    totalRoutLength: number;
    metadata: {};
    pilotId: string;
    prevAirVehicleId: string;
    creationTime: number;
    forceByRoute: POINT3D[];
    constructor(data: DELIVERY_POINT_TASK_DATA);
    saveConfig: {
        taskId: string;
        name: string;
        status: string;
        type: string;
        point: string;
        isAGL: string;
        altitudeRange: string;
        ASL_Max: string;
        slope: string;
        totalRoutLength: string;
        styles: string;
        metadata: string;
        creationTime: string;
        containerHeight: string;
        heightAboveContainerForDrop: string;
        deliveryType: string;
        deliveryAzimuth: string;
        IRLockStartHeight: string;
        forceByRoute: string;
        isNoGPS: string;
    };
    update: (data: Object) => {
        taskId: string;
        status: ALGORITHM_STATUS;
        name: string;
        type: TASK_TYPE;
        Point: GEOJSON_POINT;
        isAGL: boolean;
        altitudeRange: RANGE;
        ASL_Max: number;
        slope: RANGE;
        totalRoutLength: number;
        styles: {};
        containerHeight: number;
        heightAboveContainerForDrop: number;
        deliveryType: DELIVERY_TYPE;
        deliveryAzimuth: number;
        IRLockStartHeight: number;
        forceByRoute: POINT3D[];
        isNoGPS: boolean;
    };
    private buildArrow;
    toJsonForSave: () => {
        taskId: string;
        status: ALGORITHM_STATUS;
        name: string;
        type: TASK_TYPE;
        point: GEOJSON_POINT;
        isAGL: boolean;
        altitudeRange: RANGE;
        ASL_Max: number;
        slope: RANGE;
        creationTime: number;
        containerHeight: number;
        heightAboveContainerForDrop: number;
        deliveryType: DELIVERY_TYPE;
        deliveryAzimuth: number;
        IRLockStartHeight: number;
        forceByRoute: POINT3D[];
        isNoGPS: boolean;
    };
    toJsonForUI: () => {
        taskId: string;
        status: ALGORITHM_STATUS;
        name: string;
        type: TASK_TYPE;
        Point: GEOJSON_POINT;
        isAGL: boolean;
        altitudeRange: RANGE;
        ASL_Max: number;
        slope: RANGE;
        totalRoutLength: number;
        styles: {};
        containerHeight: number;
        heightAboveContainerForDrop: number;
        deliveryType: DELIVERY_TYPE;
        deliveryAzimuth: number;
        IRLockStartHeight: number;
        forceByRoute: POINT3D[];
        isNoGPS: boolean;
    };
    toJsonForMAPI(): MAPI_MISSION_DATA;
}
