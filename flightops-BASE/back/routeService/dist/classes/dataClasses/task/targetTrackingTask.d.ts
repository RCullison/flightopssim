import { ALGORITHM_STATUS, CREATE_TARGET_TRACKING_TASK, GEOJSON_POINT, MAPI_MISSION_DATA, RANGE, TASK_TYPE } from '../../typings/all.typings';
import { HEADING_RELATIVE_TYPE } from "../../typings/enums";
import { ITask } from './iTask';
export declare class TargetTrackingTask implements ITask {
    taskId: string;
    type: TASK_TYPE;
    status: ALGORITHM_STATUS;
    name: string;
    distanceToTargetTrackingPoint: number;
    point: GEOJSON_POINT;
    hoverPoint: GEOJSON_POINT;
    totalRoutLength: number;
    styles: {};
    metadata: {};
    ASL_Max: number;
    altitudeRange: RANGE;
    slope: RANGE;
    maxAltASL: number;
    geoLocation: GEOJSON_POINT;
    minDistanceToViewPoint: number;
    targetAGL: number;
    azimuthToPoint: boolean;
    viewingAngle: number;
    isAGL: boolean;
    missionAltAGL: number;
    headingType: HEADING_RELATIVE_TYPE;
    heading: number;
    isNoGPS: boolean;
    createConfig: {
        taskId: string;
        name: string;
        status: string;
        ASL_Max: string;
        altitudeRange: string;
        slope: string;
        maxAltASL: string;
        geoLocation: string;
        point: string;
        minDistanceToViewPoint: string;
        targetAGL: string;
        azimuthToPoint: string;
        viewingAngle: string;
        isAGL: string;
        missionAltAGL: string;
        headingType: string;
        heading: string;
        isNoGPS: string;
        styles: string;
    };
    constructor(data: CREATE_TARGET_TRACKING_TASK);
    update: (data: Object, config?: {}) => CREATE_TARGET_TRACKING_TASK;
    toJsonForUI: () => CREATE_TARGET_TRACKING_TASK;
    toJsonForMAPI(): MAPI_MISSION_DATA;
}
