import { Route } from '../../dataClasses/route/route';
import { GeoLineString } from '../../dataClasses/geo/geoLineString';
import { AUTONOMOUS_POINT, AUTONOMUS_ROUTE_FOR_FCS, CARTESIAN2, CARTESIAN3, COMPUTE_ROUTE_BYPASS_RELIEF, GEOJSON_POINT, GEOJSON_POLYGON, GEOJSON_POLYLINE, GEOPOINT, GEOPOINT3D, GEOPOINT3D_SHORT, GEOPOINT_SHORT, POINT, POINT3D, POINT_ON_PATH, POINT_ON_PATH_FOR_AGL, ROUTE_SECURITY_DATA } from '../../typings/all.typings';
import { GeoPoint } from '../../dataClasses/geo/geoPoint';
import { GeoPolygon } from '../../dataClasses/geo/geoPolygon';
import { WaypointsComplex } from '../../dataClasses/route/waypointsComplex';
export declare class Convertation {
    private static instance;
    private constructor();
    static POINT3D_Arr_to_GEOPOINT3D_SHORT_Arr: (points: POINT3D[]) => GEOPOINT3D_SHORT[];
    static POINT3D_Arr_to_GEOPOINT3D_SHORT_Arr_withHeight: (points: POINT3D[], height: number) => GEOPOINT3D_SHORT[];
    static ROUTE_SECURITY_DATA_to_GEOPOINT3D_SHORT_Arr: (data: ROUTE_SECURITY_DATA) => GEOPOINT3D_SHORT[];
    static AUTONOMOUS_POINT_to_GEOPOINT_3D_SHORT: (actionPoint: AUTONOMOUS_POINT) => GEOPOINT3D_SHORT;
    static POINT3D_to_GEOPOINT_3D_SHORT: (startPoint: POINT3D) => GEOPOINT3D_SHORT;
    static POINT3D_to_GEOPOINT_3D: (startPoint: POINT3D) => GEOPOINT3D;
    static GeoPoint_to_GEOPOINT: (startPoint: GeoPoint | GEOJSON_POINT) => GEOPOINT;
    static GeoPoint_to_GEOPOINT3D: (startPoint: GeoPoint | GEOJSON_POINT) => GEOPOINT3D;
    static GeoPoint_to_GEOPOINT_3D_SHORT: (startPoint: GeoPoint | GEOJSON_POINT) => GEOPOINT3D_SHORT;
    static GeoPoint_to_POINT: (startPoint: GeoPoint | GEOJSON_POINT) => POINT;
    static GeoPoint_to_POINT3D: (startPoint: GeoPoint | GEOJSON_POINT) => POINT | POINT3D;
    static GeoPoint_to_Height: (point: GeoPoint | GEOJSON_POINT) => number;
    static GeoLineString_to_POINT3D_Array: (geoLineString: GEOJSON_POLYLINE | GeoLineString) => (POINT3D | POINT)[];
    static GeoLineString_to_POINT_Array: (geoLineString: GEOJSON_POLYLINE | GeoLineString) => POINT[];
    static POINTsArr_To_GeoLineString: (pointsArr: (POINT3D | POINT)[]) => GeoLineString;
    static POINT3D_to_POINT: (point: POINT3D) => POINT;
    static POINT3D_Array_to_POINT_Array: (points: POINT3D[]) => POINT[];
    static GEOPOINT_3D_SHORT_to_POINT: (startPoint: GEOPOINT3D_SHORT) => POINT;
    static GEOPOINT_to_GeoPoint: (startPoint: GEOPOINT, height?: number) => GeoPoint;
    static GEOPOINT_to_GEOJSON_POINT: (startPoint: GEOPOINT, height?: number) => GEOJSON_POINT;
    static GEOPOINT3D_to_GeoPoint: (point: GEOPOINT3D) => GeoPoint;
    static GEOPOINT3D_to_GEOJSON_POINT: (point: GEOPOINT3D) => GEOJSON_POINT;
    static GEOPOINT_3D_SHORT_to_POINT3D: (startPoint: GEOPOINT3D_SHORT) => POINT3D;
    static GEOPOINT_3D_SHORT_Arr_to_POINT3D_Arr: (geoPoints: GEOPOINT3D_SHORT[]) => POINT3D[];
    static GEOPOINT_to_POINT3D: (startPoint: GEOPOINT, height?: number) => POINT3D;
    static GEOPOINT3D_to_GEOPOINT_3D_SHORT: (geoPoint: GEOPOINT3D) => GEOPOINT3D_SHORT;
    static GEOPOINT3D_to_POINT3D: (geoPoint: GEOPOINT3D, heightFactor?: number) => POINT3D;
    static GEOPOINT3D_Arr_to_POINT3D_Arr: (geoPoints: GEOPOINT3D[], heightFactor?: number) => POINT3D[];
    static GEOPOINT_to_POINT: (startPoint: GEOPOINT, height?: number) => POINT;
    static GEOJSON_POINT_to_POINT: (geoJsonPoint: GEOJSON_POINT, height?: number) => POINT | POINT3D;
    static POINT_to_GeoPoint: (point: POINT | POINT3D) => GeoPoint;
    static POINT_to_GEOPOINT_to_GEOJSON_POINT: (point: POINT | POINT3D) => GEOJSON_POINT;
    static POINT_to_GEOPOINT: (startPoint: POINT | POINT3D) => GEOPOINT;
    static POINT_Arr_to_GEOPOINT_Arr: (points: (POINT | POINT3D)[]) => GEOPOINT[];
    static GEOPOINT_UI_to_POINT3D: (startPoint: GEOPOINT_SHORT, height?: number) => POINT3D;
    static GEOPOINT_UI_to_GeoPoint: (startPoint: GEOPOINT_SHORT) => GeoPoint;
    static POINT_to_GEOPOINT_UI: (startPoint: POINT | POINT3D) => GEOPOINT_SHORT;
    static POINT_to_GEOPOINT3D: (startPoint: POINT3D) => GEOPOINT3D;
    static Geopoint_To_turfPoint: (geopoint: GeoPoint | GEOJSON_POINT) => any;
    static POINT_To_turfPoint: (point: (POINT3D | POINT)) => any;
    static POINTs_Arr_Arr_To_turfPolygon: (polygons: (POINT3D | POINT)[][]) => GEOJSON_POLYGON;
    static GeoPolygon_To_turfPolygon: (polygon: GEOJSON_POLYGON | GeoPolygon) => GEOJSON_POLYGON;
    static GeoPolygon_To_POINTsArrArr: (polygon: GEOJSON_POLYGON) => (POINT | POINT3D)[][];
    static POINTs_To_turfLine: (points: (POINT | POINT3D)[]) => any;
    static angleTo180_180: (angle: number) => number;
    static WaypointsComplex_to_POINT_Arr: (route: WaypointsComplex) => POINT[];
    static WaypointsComplex_to_POINT3D_Arr: (route: WaypointsComplex) => POINT3D[];
    static Route_To_POINTsArr: (route: Route) => POINT[];
    static path_to_POINT_ON_PATH_Arr_ForAGL: (requestData: COMPUTE_ROUTE_BYPASS_RELIEF, isPointFixed?: boolean, isHeightFixed?: boolean) => POINT_ON_PATH_FOR_AGL[];
    static path_to_POINT_ON_PATH_Arr: (requestData: (POINT | POINT3D)[]) => POINT_ON_PATH[];
    static path_to_CARTESIAN2_Arr: (path: (POINT | POINT3D)[], defaultAltitude?: number, takeOffPointAlt?: number) => CARTESIAN2[];
    static POINT_ON_PATH_Arr_to_POINT3D_Arr: (pathForCompute: (POINT_ON_PATH_FOR_AGL | POINT_ON_PATH)[]) => POINT3D[];
    static POINT_ON_PATH_Arr_to_GEOPOINT_Arr: (pathForCompute: POINT_ON_PATH_FOR_AGL[]) => GEOPOINT[];
    static CARTESIAN_2_3_Arr_to_POINT3D_Arr: (pathForCompute: (CARTESIAN2 | CARTESIAN3)[]) => POINT3D[];
    static CARTESIAN_2_3_to_POINT3D: (pointCartesian: (CARTESIAN2 | CARTESIAN3)) => POINT3D;
    static AUTONOMUS_ROUTE_FOR_FCS_to_POINT: (autonomusRoute: AUTONOMUS_ROUTE_FOR_FCS) => POINT[];
}
