import { IComputeNfz } from '../../../../../classes/applicationClasses/nfzUtility/IComputeNfz';
import { Nfz } from '../../../../../classes/dataClasses/site/nfz';
import { AIR_VEHICLE_ID, ALLOWED_ID, ASYNC_RESPONSE, DYNAMIC_NFZ_ID, ID_OBJ, ID_TYPE, MAP, NFZ_DATA, POINT, POINT3D } from '../../../../../classes/typings/all.typings';
export declare class NfzManager {
    private static instance;
    private nfzStatic;
    private nfzDynamic;
    private nfzExternal;
    private nfzTemporary;
    computeNfzLogic: MAP<IComputeNfz>;
    private constructor();
    private getStaticNfzFromAMS;
    private getExternalNfzFromAMS;
    private getDynamicNfzFromAMS;
    private MAP_MAP_NFZ_DATA_to_MAP_MAP_Nfz;
    private MAP_NFZ_DATA_to_MAP_Nfz;
    private setStatic;
    private setTemporary;
    private getStaticJSON;
    private getAllStaticJSON;
    private deleteStatic;
    private deleteAllStatic;
    private getAllDynamicJSON;
    private deleteDynamicNfz;
    private deleteAirVehicleDynamicNFZs;
    private deleteAllDynamicLogic;
    private deleteAllDynamic;
    private updateAllStatic;
    private updateAllExternal;
    private updateAllDynamic;
    private findMaxAlt;
    private getAllNFZ_Data;
    private getAllNFZ;
    private getDynamicNFZ;
    private addCrossAllNfzPoints;
    private sortStraightPath;
    static setStatic: (nfzdata: NFZ_DATA) => Promise<ASYNC_RESPONSE<NFZ_DATA>>;
    static getStaticJSON: (data: ID_OBJ) => ASYNC_RESPONSE<Nfz>;
    static getAllStaticJSON: () => ASYNC_RESPONSE<MAP<NFZ_DATA>>;
    static deleteStatic: (data: ID_OBJ) => Promise<ASYNC_RESPONSE<NFZ_DATA>>;
    static deleteAllStatic: () => Promise<ASYNC_RESPONSE>;
    static getAllDynamicJSON: () => ASYNC_RESPONSE<MAP<NFZ_DATA>>;
    static deleteDynamic: (deleteParams: DYNAMIC_NFZ_ID) => Promise<ASYNC_RESPONSE<NFZ_DATA>>;
    static deleteAllDynamic: () => Promise<ASYNC_RESPONSE>;
    static deleteAirVehicleDynamicNFZs: (deleteParams: ALLOWED_ID) => Promise<ASYNC_RESPONSE<NFZ_DATA>>;
    static updateAllStatic: (nfzData: MAP<NFZ_DATA>) => void;
    static updateAllExternal: (nfzData: MAP<NFZ_DATA>) => void;
    static updateAllDynamic: (nfzData: MAP<MAP<NFZ_DATA>>) => void;
    static setTemporary: (nfzdata: NFZ_DATA) => Promise<ASYNC_RESPONSE<NFZ_DATA>>;
    static getAllNFZ_Data: () => ASYNC_RESPONSE<MAP<NFZ_DATA>>;
    static getAllNFZ: () => MAP<Nfz>;
    static getDynamicNFZ: (airVehicleId: ID_TYPE, nfzId: ID_TYPE) => MAP<MAP<Nfz>>;
    static addCrossAllNfzPoints: (route: (POINT | POINT3D)[], allowedId?: AIR_VEHICLE_ID) => POINT[];
}
