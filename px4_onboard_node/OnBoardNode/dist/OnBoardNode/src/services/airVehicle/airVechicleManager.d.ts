import { ALGORITHM_STATUS, ALGORITHM_STATUS_OBJ, ASYNC_RESPONSE, AUTONOMUS_ROUTE, CHANGE_ALT_FOR_OB, GEOPOINT3D, GO_TO_HEIGHT_REQUEST, LAND_ON_MISSION_REQUEST, LIDAR_DATA, MOVE_TO_POINT, ROTATE_REQUEST, TAKEOFF_REQUEST, VEHICLE_SCAN } from "../../../../classes/typings/all.typings";
import { TELEMETRY_SERVICE_DATA } from "../../../../classes/typings/ob-node-types";
export declare class AirVehicleManager {
    private geofence;
    private accurateLandingDistanceTolerance;
    private isStartAccLanding;
    private lastTimeStartedLandNow;
    private lastTimeStartedLand;
    private timeOutGeneral;
    private static instance;
    private projConf;
    private telemetryAdaptedToFCS;
    private currentRoute;
    private intervalUpDown;
    private timeoutUpDown;
    private listen;
    private lastWayPointUploaded;
    private getTelemetry4FCS;
    private goToHeightReqObject;
    private arrPoints;
    private forceIntervals;
    private rotateVehicle;
    private beginSendingRotateStart2Finish;
    private sendUDPRate;
    private getMaxmaxFlightSpeedForAll;
    private getMinautoFlightSpeedForAll;
    private clearAllForceIntervals;
    private checkFieldsAndSendResponse;
    private upload;
    private lastWayPointUploaded_2_arrPoint;
    private start;
    private sendAction;
    private stop;
    private stopAllActions;
    private pause;
    private resume;
    private getAltitude;
    private getHeading;
    private getLocation;
    private setStatus;
    private doHeading;
    private doRotation;
    private go2height;
    private sendResp2ALS;
    private clearStopIntervalVZ;
    private stopChangeAltitude;
    private getVelocityScalar;
    private startCAS;
    private startCASByLidar;
    private stopCAS;
    private onMissionTakeOff;
    private onMissionLand;
    private checkRespCAS;
    private setPreflight;
    private setGeoFence;
    private landNOW;
    private getLastTimeStartedLandNow;
    private setLastTimeStartedLandNow;
    private getLastTimeStartedLand;
    private setLastTimeStartedLand;
    private onLand;
    private landNormal;
    private landOptic;
    private clearMissionInterval;
    private startClearMission;
    private cleaIntervalLand;
    private setModeToGuided;
    private doLand;
    private isPossibleToDoAccurateLanding;
    private landingAccOrVisual;
    private accurateLanding;
    private validateAccurateLandParams;
    private stopIfNotArmedInterval;
    private setIsFlagStartAccLanding;
    private changeHomeToCurrentLocation;
    private moveAirVehicle;
    private rotateAirVehicle;
    private checkIfReachedHeight;
    static listen: (projConf: any) => void;
    static getTelemetry4FCS: () => TELEMETRY_SERVICE_DATA;
    static rotateVehicle: (obj: VEHICLE_SCAN, cb: Function) => void;
    static getAltitude: () => number;
    static getHeading: () => number;
    static getLocation: () => GEOPOINT3D;
    static upload2Controller: (body: AUTONOMUS_ROUTE) => Promise<ASYNC_RESPONSE>;
    static start2Controller: () => Promise<ASYNC_RESPONSE>;
    static stop2Controller: () => Promise<ASYNC_RESPONSE>;
    static stopAllActions: () => Promise<ASYNC_RESPONSE>;
    static pause2Controller: () => Promise<ASYNC_RESPONSE>;
    static resume2Controller: () => Promise<ASYNC_RESPONSE>;
    static doHeading: (requestedHeading: number, cb: Function) => void;
    static go2height: (obj: GO_TO_HEIGHT_REQUEST, isNeedRequstOnTheEndToALS: boolean, cb: Function) => void;
    static setPreflight: (operationalAlt: number) => Promise<unknown>;
    static getGeofence: {
        maxRadius: number;
        maxAltitude: number;
    };
    static setModeToGuided: (allowSend?: boolean) => Promise<ASYNC_RESPONSE>;
    static stopChangeAltitude: () => void;
    static setStatus: (data: ALGORITHM_STATUS_OBJ) => ALGORITHM_STATUS;
    static clearAllForceIntervals: () => void;
    static getVelocityScalar: () => number;
    static startCAS: (body: CHANGE_ALT_FOR_OB) => Promise<ASYNC_RESPONSE<any>>;
    static stopCAS: () => Promise<ASYNC_RESPONSE<any>>;
    static startCASByLidar: (body: LIDAR_DATA) => Promise<ASYNC_RESPONSE<any>>;
    static onMissionTakeOff: (obj: TAKEOFF_REQUEST) => Promise<ASYNC_RESPONSE<Object>>;
    static onMissionLand: (requestBody: LAND_ON_MISSION_REQUEST) => Promise<ASYNC_RESPONSE>;
    static landNow: (body: {
        landASLAlt: number;
    }, todoUpdateHomeInTelemetry: boolean) => Promise<ASYNC_RESPONSE<any>>;
    static getLastTimeStartedLandNow: () => boolean;
    static setLastTimeStartedLandNow: (val: boolean) => void;
    static getLastTimeStartedLand: () => boolean;
    static setLastTimeStartedLand: (val: boolean) => void;
    static onLand: (body: any) => Promise<unknown>;
    static clearIntervalLand: () => void;
    static accurateLanding: (requestBody: any) => Promise<ASYNC_RESPONSE<any>>;
    static checkIfReachedHeight: (requestedHeight: number) => Promise<ASYNC_RESPONSE>;
    static moveAirVehicle: (isAirVehicleInHomeLocation: MOVE_TO_POINT) => Promise<ASYNC_RESPONSE>;
    static rotateAirVehicle: (isAirVehicleInHomeLocation: ROTATE_REQUEST) => Promise<ASYNC_RESPONSE>;
    static doLand: (cb: Function) => void;
}
